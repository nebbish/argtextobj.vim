*argtextobj.txt*    A text-object for function arguments         *argtextobj*

1. INTRODUCTION                                     |argtextobj-about|
2. OPTIONS                                          |argtextobj-options|
3. EXAMPLES                                         |argtextobj-examples|

=============================================================================
1. INTRODUCTION ~
                                                        |argtextobj-about|

This plugin provides a text-object 'a' (argument). You can
d(elete), c(hange), v(select)... an argument or inner argument in familiar
ways.
'daa'(delete-an-argument)
'cia'(change-inner-argument)
'via'(select-inner-argument)
What this script does is more than just typing
  F,dt,
because it recognizes inclusion relationship of parentheses.

=============================================================================
2. OPTIONS ~
                                                        |argtextobj-options|

>
  g:argumentobject_mapping
<
  Default: 'a'
  Sets the default mapping for the text-object. You may want to change this
  in case you have mapped 'a' to a different text-objext like angle brackets.
>
  g:argumentobject_force_toplevel
<
  Default: 0
  Descide whether the motion should go out to toplevel function or not in
  nested functions.

=============================================================================
3. EXAMPLES ~
                                                        |argtextobj-examples|

  case1) delete An argument
      function(int arg1,    ch<press 'daa' here>ar* arg2="a,b,c(d,e)")
      function(int arg1<cursor here; and if you press 'daa' again..>)
      function(<cursor>)

  case2) change Inner argument
      function(int arg1,    ch<press 'cia' here>ar* arg2="a,b,c(d,e)")
      function(int arg1,    <cursor>)

  case 3) smart argument recognition (g:argumentobject_force_toplevel = 0)
       function(1, (20<press 'cia' here>*30)+40, somefunc2(3, 4))
       function(1, <cursor>, somefunc2(3, 4))

       function(1, (20*30)+40, somefunc2(<press 'cia' here>3, 4))
       function(1, (20*30)+40, somefunc2(<cursor>, 4))

  case 4) smart argument recognition (g:argumentobject_force_toplevel = 1)
       function(1, (20<press 'cia' here>*30)+40, somefunc2(3, 4))
       function(1, <cursor>, somefunc2(3, 4)) " same as above

       function(1, (20*30)+40, somefunc2(<press 'cia' here>3, 4))
       function(1, (20*30)+40, <cursor>)    " sub-level function is deleted
                                            " because it is a argument in
                                            " terms of the outer function.

" vim:tw=78:et:ft=help:norl:
